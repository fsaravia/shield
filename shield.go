package shield

import (
	"crypto/rand"
	"crypto/sha512"
	"encoding/hex"

	"golang.org/x/crypto/pbkdf2"
)

// MaxLength indicates the maximum length that a password can have.
// Excessively long passwords (e.g. 1MB strings) would hang a server.
// https://www.djangoproject.com/weblog/2013/sep/15/security/
const MaxLength = 4096

type Error string

func (e Error) Error() string { return string(e) }

const ErrPasswordTooLong = Error("password too long")

// Shield is a struct that contains basic configuration variables used to
// encrypt and check strings.
//     Iterations: is the number of iterations to run PBKDF2.
//     SaltLength: is the length of the salt generated by GenerateSalt.
type Shield struct {
	Iterations, SaltLength int
}

// Default returns an instance of Shield initialized with default values for
// each of its variables:
//     Iterations: 5000
//     SaltLength: 32
func Default() Shield {
	return Shield{
		Iterations: 5000,
		SaltLength: 32}
}

// Check returns true if the supplied password matches the password+salt of encrypted.
func (s Shield) Check(password, encrypted []byte) bool {
	hash := encrypted[0:128]
	salt := encrypted[128:]

	return s.digest(password, salt) == string(hash)
}

func (s Shield) digest(password, salt []byte) string {
	dig := pbkdf2.Key(password, salt, s.Iterations, sha512.Size, sha512.New)

	return hex.EncodeToString(dig)
}

// Encrypt will return a string with a salt-encrypted version of
// password. This encrypted password is self contained, in the sense
// that there's no need to store the encrypted password and salt
// separatedly, as it will have everything in the returned string.
func (s Shield) Encrypt(password, salt []byte) (string, error) {
	if len(password) > MaxLength {
		return "", ErrPasswordTooLong
	}
	return s.digest(password, salt) + string(salt), nil
}

// GenerateSalt returns a new salt of SaltLength length filled with
// random bytes.
func (s Shield) GenerateSalt() ([]byte, error) {
	salt := make([]byte, s.SaltLength)
	_, err := rand.Read(salt)
	return salt, err
}
